// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  phoneNumber    String?  @unique
  email          String?  @unique
  passwordHash   String
  name           String?
  bio            String?
  city           String?
  profilePicture String?
  timeZone       String?
  joinedAt       DateTime @default(now())
  inviteCode     String?
  invitedById    String?
  invitedBy      User?    @relation("InvitedUsers", fields: [invitedById], references: [id])
  invitedUsers   User[]   @relation("InvitedUsers")
  isDeleted      Boolean  @default(false)

  createdVibes      Vibe[]            @relation("CreatedVibes")
  contributedVibes  VibeContributor[]
  media             Media[]
  vibeViews         VibeViewer[]
  favorites         Favorite[]
  notifications     Notification[]    @relation("RecipientNotifications")
  sentNotifications Notification[]    @relation("SenderNotifications")
  drafts            Draft[]
  invites           VibeInvite[]      @relation("InvitedUser")
  sentInvites       VibeInvite[]      @relation("Inviter")
  suggestedTo       SuggestedUser[]   @relation("SuggestedTo")
  suggestedFrom     SuggestedUser[]   @relation("SuggestedFrom")
  feedEvents        FeedEvent[]
  inviteQueue       InviteQueue[]
  flaggedMedia      MediaFlag[]
}

model Vibe {
  id           String    @id @default(uuid())
  title        String
  description  String?
  location     String?
  startDate    DateTime?
  endDate      DateTime?
  coverMediaId String?   @unique
  coverMedia   Media?    @relation("CoverMedia", fields: [coverMediaId], references: [id])
  createdById  String
  createdBy    User      @relation("CreatedVibes", fields: [createdById], references: [id])
  isShared     Boolean   @default(false)
  status       String // Enum: draft, in_progress, finalized, abandoned
  finalizedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  contributors  VibeContributor[]
  media         Media[]
  viewers       VibeViewer[]
  drafts        Draft[]
  invites       VibeInvite[]
  notifications Notification[]
  feedEvents    FeedEvent[]
  cityFeedCache CityFeedCache[]
  inviteQueue   InviteQueue[]
}

model VibeContributor {
  id          String    @id @default(uuid())
  vibe        Vibe      @relation(fields: [vibeId], references: [id])
  vibeId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        String // Enum: admin, contributor
  joinedAt    DateTime  @default(now())
  hasUploaded Boolean   @default(false)
  leftAt      DateTime?
}

model Media {
  id           String    @id @default(uuid())
  vibe         Vibe      @relation(fields: [vibeId], references: [id])
  vibeId       String
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  mediaType    String // Enum: image, video, audio
  mediaUrl     String
  thumbnailUrl String?
  caption      String?
  timestamp    DateTime?
  exifData     Json?
  createdAt    DateTime  @default(now())

  favoritedBy   Favorite[]
  coverOfVibe   Vibe?          @relation("CoverMedia")
  flags         MediaFlag[]
  notifications Notification[]
}

model VibeViewer {
  id       String   @id @default(uuid())
  vibe     Vibe     @relation(fields: [vibeId], references: [id])
  vibeId   String
  viewer   User     @relation(fields: [viewerId], references: [id])
  viewerId String
  viewedAt DateTime @default(now())
}

model Favorite {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  media       Media    @relation(fields: [mediaId], references: [id])
  mediaId     String
  favoritedAt DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  recipient   User     @relation("RecipientNotifications", fields: [recipientId], references: [id])
  recipientId String
  sender      User     @relation("SenderNotifications", fields: [senderId], references: [id])
  senderId    String
  type        String
  message     String?
  vibeId      String?
  vibe        Vibe?    @relation(fields: [vibeId], references: [id])
  mediaId     String?
  media       Media?   @relation(fields: [mediaId], references: [id])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Draft {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  vibe         Vibe      @relation(fields: [vibeId], references: [id])
  vibeId       String
  lastEditedAt DateTime  @default(now())
  expiresAt    DateTime?
}

model VibeInvite {
  id            String    @id @default(uuid())
  vibe          Vibe      @relation(fields: [vibeId], references: [id])
  vibeId        String
  invitedUser   User      @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId String
  invitedBy     User      @relation("Inviter", fields: [invitedById], references: [id])
  invitedById   String
  status        String // Enum: pending, accepted, declined
  invitedAt     DateTime  @default(now())
  respondedAt   DateTime?
}

model MediaFlag {
  id             String   @id @default(uuid())
  media          Media    @relation(fields: [mediaId], references: [id])
  mediaId        String
  flaggedBy      User     @relation(fields: [flaggedById], references: [id])
  flaggedById    String
  reason         String
  additionalInfo String?
  flaggedAt      DateTime @default(now())
}

model FeedEvent {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  eventType String
  vibe      Vibe?    @relation(fields: [vibeId], references: [id])
  vibeId    String?
  createdAt DateTime @default(now())
}

model SuggestedUser {
  id              String    @id @default(uuid())
  user            User      @relation("SuggestedTo", fields: [userId], references: [id])
  userId          String
  suggestedUser   User      @relation("SuggestedFrom", fields: [suggestedUserId], references: [id])
  suggestedUserId String
  reason          String?
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?
}

model CityFeedCache {
  id       String   @id @default(uuid())
  city     String
  vibe     Vibe     @relation(fields: [vibeId], references: [id])
  vibeId   String
  cachedAt DateTime @default(now())
}

model InviteQueue {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  vibe      Vibe     @relation(fields: [vibeId], references: [id])
  vibeId    String
  invitedAt DateTime @default(now())
}
